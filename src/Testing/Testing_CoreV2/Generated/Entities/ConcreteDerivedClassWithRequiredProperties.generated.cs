//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Testing
{
   public partial class ConcreteDerivedClassWithRequiredProperties : Testing.AbstractBaseClass, INotifyPropertyChanged
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected ConcreteDerivedClassWithRequiredProperties(): base()
      {
         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="_property1"></param>
      /// <param name="_property0"></param>
      public ConcreteDerivedClassWithRequiredProperties(string _property1, string _property0)
      {
         if (string.IsNullOrEmpty(_property1)) throw new ArgumentNullException(nameof(_property1));
         Property1 = _property1;
         if (string.IsNullOrEmpty(_property0)) throw new ArgumentNullException(nameof(_property0));
         Property0 = _property0;
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="_property1"></param>
      /// <param name="_property0"></param>
      public static ConcreteDerivedClassWithRequiredProperties Create(string _property1, string _property0)
      {
         return new ConcreteDerivedClassWithRequiredProperties(_property1, _property0);
      }

      // Persistent properties

      [Required]
      protected string _Property1;
      partial void SetProperty1(string oldValue, ref string newValue);
      partial void GetProperty1(ref string result);

      /// <summary>
      /// Required
      /// </summary>
      public string Property1
      {
         get { string value = _Property1; GetProperty1(ref value); return (_Property1 = value); }
         set { string oldValue = _Property1; SetProperty1(oldValue, ref value); _Property1 = value;  OnPropertyChanged(); }
      }

      public event PropertyChangedEventHandler PropertyChanged;

      protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
      {
         PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }

   }
}


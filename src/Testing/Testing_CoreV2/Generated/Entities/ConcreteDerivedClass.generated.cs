//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Testing
{
   public partial class ConcreteDerivedClass : Testing.AbstractBaseClass, INotifyPropertyChanged
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected ConcreteDerivedClass(): base()
      {
         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="_property0"></param>
      public ConcreteDerivedClass(string _property0)
      {
         if (string.IsNullOrEmpty(_property0)) throw new ArgumentNullException(nameof(_property0));
         Property0 = _property0;
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="_property0"></param>
      public static new ConcreteDerivedClass Create(string _property0)
      {
         return new ConcreteDerivedClass(_property0);
      }

      // Persistent properties

      protected string _Property1;
      partial void SetProperty1(string oldValue, ref string newValue);
      partial void GetProperty1(ref string result);

      public string Property1
      {
         get
         {
            string value = _Property1;
            GetProperty1(ref value);
            return (_Property1 = value);
         }
         set
         {
            string oldValue = _Property1;
            SetProperty1(oldValue, ref value);
            if (oldValue != value)
            {
               _Property1 = value;
               OnPropertyChanged();
            }
         }
      }

      protected string _PropertyInChild;
      partial void SetPropertyInChild(string oldValue, ref string newValue);
      partial void GetPropertyInChild(ref string result);

      public string PropertyInChild
      {
         get
         {
            string value = _PropertyInChild;
            GetPropertyInChild(ref value);
            return (_PropertyInChild = value);
         }
         set
         {
            string oldValue = _PropertyInChild;
            SetPropertyInChild(oldValue, ref value);
            if (oldValue != value)
            {
               _PropertyInChild = value;
               OnPropertyChanged();
            }
         }
      }

      public override event PropertyChangedEventHandler PropertyChanged;

      protected override void OnPropertyChanged([CallerMemberName] string propertyName = null)
      {
         PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }

   }
}


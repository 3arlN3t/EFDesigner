//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Identity_EFCoreV2NetFramework
{
   /// <summary>
   /// Represents a class that uses the default entity types for ASP.NET Identity Users,
   /// Roles, Claims, Logins
   /// </summary>
   public partial class ApplicationDbContext : Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext<ApplicationUser, ApplicationRole, String, Microsoft.AspNetCore.Identity.IdentityUserLogin<String>, Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole<String>, Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim<String>>
   {
      #region DbSets
      #endregion DbSets

      #region Constructors

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=.\sqlexpress;Initial Catalog=Identity;Integrated Security=True";

      /// <inheritdoc />
      public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
      {
      }

      #endregion

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");



         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityRole>()
                     .Property(t => t.Id)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityRole>()
                     .Property(t => t.Name)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityRole>()
                     .HasMany(x => x.Users)
                     .WithOne()
                     .HasForeignKey("IdentityUserRole_Users_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.Id)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.Email)
                     .HasMaxLength(256);
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.EmailConfirmed)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.PasswordHash)
                     .HasMaxLength(1024);
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.SecurityStamp)
                     .HasMaxLength(1024);
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.PhoneNumber)
                     .HasMaxLength(15);
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.PhoneNumberConfirmed)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.TwoFactorEnabled)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.LockoutEnabled)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.AccessFailedCount)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .Property(t => t.UserName)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .HasMany(x => x.Roles)
                     .WithOne()
                     .HasForeignKey("IdentityUserRole_Roles_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .HasMany(x => x.Claims)
                     .WithOne()
                     .HasForeignKey("IdentityUserClaim_Claims_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUser>()
                     .HasMany(x => x.Logins)
                     .WithOne()
                     .HasForeignKey("IdentityUserLogin_Logins_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserClaim>()
                     .Property(t => t.Id)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserClaim>()
                     .Property(t => t.UserId)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserClaim>()
                     .Property(t => t.ClaimType)
                     .HasMaxLength(256);
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserClaim>()
                     .Property(t => t.ClaimValue)
                     .HasMaxLength(256);

         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserLogin>()
                     .Property(t => t.LoginProvider)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserLogin>()
                     .Property(t => t.ProviderKey)
                     .HasMaxLength(1024)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserLogin>()
                     .Property(t => t.UserId)
                     .HasMaxLength(256)
                     .IsRequired();

         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserRole>()
                     .Property(t => t.UserId)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Microsoft.AspNet.Identity.EntityFramework.IdentityUserRole>()
                     .Property(t => t.RoleId)
                     .HasMaxLength(256)
                     .IsRequired();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}

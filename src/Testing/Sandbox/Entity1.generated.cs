//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Sandbox
{
   public partial class Entity1 : INotifyPropertyChanged
   {
      partial void Init();

      /// <summary>
      /// Default constructor
      /// </summary>
      public Entity1()
      {
         Init();
      }

      // Persistent properties

      /// <summary>
      /// Identity, Required, Indexed
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /// <summary>
      /// Backing field for Foo ;
      /// </summary>
      protected string _Foo;
      /// <summary>
      /// When provided in a partial class, allows value of _Foo to be changed before setting.
      /// </summary>
      partial void SetFoo(string oldValue, ref string newValue);
      /// <summary>
      /// When provided in a partial class, allows value of _Foo to be changed before returning.
      /// </summary>
      partial void GetFoo(ref string result);

      public string Foo
      {
         get
         {
            string value = _Foo;
            GetFoo(ref value);
            return (_Foo = value);
         }
         set
         {
            string oldValue = _Foo;
            SetFoo(oldValue, ref value);
            if (oldValue != value)
            {
               _Foo = value;
               OnPropertyChanged();
            }
         }
      }

      public virtual event PropertyChangedEventHandler PropertyChanged;

      protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
      {
         PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }

   }
}


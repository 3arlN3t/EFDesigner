//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Testing
{
   /// <inheritdoc/>
   public partial class AllFeatureModel : DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Testing.Base> Bases { get; set; }
      public virtual DbSet<Dictionary<string, object>> Entity1 => Set<Dictionary<string, object>>("Entity1");
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Testing.Entity11> Entity11 { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Testing.Entity2> Entity2 { get; set; }
      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=.;Initial Catalog=Sandbox;Integrated Security=True";

      /// <inheritdoc />
      public AllFeatureModel(DbContextOptions<AllFeatureModel> options) : base(options)
      {
      }

      /// <summary>
      /// Partial method that runs as the last action in OnConfiguring.
      /// Implement to do any custom setup for the DbContext
      /// </summary>
      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         optionsBuilder.UseLazyLoadingProxies();

         CustomInit(optionsBuilder);
      }

      /// <summary>
      /// Partial method that runs as the first action in OnModelCreating.
      /// Implement to do any custom setup prior to defining the object model in the DBContext
      /// </summary>
      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);

      /// <summary>
      /// Partial method that runs as the last action in OnModelCreating.
      /// Implement to add any custom setup or override any generated code actions when defining the object model in the DBContext
      /// </summary>
      /// <param name="modelBuilder"></param>
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         //System.Diagnostics.Debugger.Launch();
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::Testing.Base>().ToTable("Bases").HasKey(t => t.Id);
         modelBuilder.Entity<global::Testing.Base>().Property(t => t.Id).IsRequired().ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Testing.Base>().HasOne(x => x.Entity11).WithMany(x => x.Bases).HasForeignKey("Entity11_Id");

         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Entity1").IndexerProperty<long>("Id").IsRequired().ValueGeneratedOnAdd();
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Entity1").IndexerProperty<string?>("Property1").HasMaxLength(25);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Entity1").IndexerProperty<string?>("Property2").HasMaxLength(25);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Entity1").IndexerProperty<string?>("Property3").HasMaxLength(25);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Entity1").HasOne(typeof(global::Testing.Entity2), "Entity2").WithMany().HasForeignKey("Entity2_Id");
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Entity1").HasMany(typeof(global::Testing.Entity2), "Entity2_1").WithMany("Entity1");
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Entity1").ToTable("Entity1").HasKey("Id");

         modelBuilder.Entity<global::Testing.Entity11>().ToTable("Entity11").HasKey(t => t.Id);
         modelBuilder.Entity<global::Testing.Entity11>().Property(t => t.Id).IsRequired().ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Testing.Entity11>().Property(t => t.Property1).HasMaxLength(25);
         modelBuilder.Entity<global::Testing.Entity11>().Property(t => t.Property2).HasMaxLength(25);
         modelBuilder.Entity<global::Testing.Entity11>().Property(t => t.Property3).HasMaxLength(25);

         modelBuilder.Entity<global::Testing.Entity2>().Property(t => t.Property1).HasMaxLength(25);
         modelBuilder.Entity<global::Testing.Entity2>().Property(t => t.Property2).HasMaxLength(25);

         OnModelCreatedImpl(modelBuilder);
      }
   }
}

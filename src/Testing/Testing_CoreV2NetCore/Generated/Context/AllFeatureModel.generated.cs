//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Testing_CoreV2NetCore
{
   public partial class AllFeatureModel : Microsoft.EntityFrameworkCore.DbContext
   {
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.AbstractBaseClass> AbstractBaseClasses { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.AllPropertyTypesOptional> AllPropertyTypesOptionals { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.AllPropertyTypesRequired> AllPropertyTypesRequireds { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.BaseClass> BaseClasses { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.BaseClassWithRequiredProperties> BaseClassWithRequiredProperties { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.BChild> BChilds { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.BParentCollection> BParentCollections { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.BParentOptional> BParentOptionals { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.BParentRequired> BParentRequireds { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.Child> Children { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.ConcreteDerivedClass> ConcreteDerivedClasses { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.ConcreteDerivedClassWithRequiredProperties> ConcreteDerivedClassWithRequiredProperties { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.DerivedClass> DerivedClasses { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.HiddenEntity> HiddenEntities { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.Master> Masters { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.ParserTest> ParserTests { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.RenamedColumn> RenamedColumns { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.UChild> UChilds { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.UParentCollection> UParentCollections { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.UParentOptional> UParentOptionals { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<Testing_CoreV2NetCore.UParentRequired> UParentRequireds { get; set; }

      public AllFeatureModel() : base()
      {
      }

      public AllFeatureModel(DbContextOptions<AllFeatureModel> options) : base(options)
      {
      }

      partial void CustomInit(ref DbContextOptionsBuilder optionsBuilder);

      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(ref optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");


         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesOptional>()
                     .ToTable("AllPropertyTypesOptionals")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesOptional>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesOptional>()
                     .Property(t => t.StringAttr)
                     .HasMaxLength(10);

         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .ToTable("AllPropertyTypesRequireds")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .HasIndex(t => t.ByteAttr);
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.BinaryAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.BooleanAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.ByteAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.DateTimeAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.DateTimeOffsetAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.DecimalAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.DoubleAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.GuidAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.Int16Attr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.Int32Attr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.Int64Attr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.SingleAttr)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.StringAttr)
                     .HasMaxLength(10)
                     .IsRequired();
         modelBuilder.Entity<Testing_CoreV2NetCore.AllPropertyTypesRequired>()
                     .Property(t => t.TimeAttr)
                     .IsRequired();


         modelBuilder.Entity<Testing_CoreV2NetCore.BaseClassWithRequiredProperties>()
                     .ToTable("BaseClassWithRequiredProperties")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.BaseClassWithRequiredProperties>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.BaseClassWithRequiredProperties>()
                     .Property(t => t.Property0)
                     .IsRequired();

         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .ToTable("BChilds")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .HasOne(x => x.BParentRequired)
                     .WithOne(x => x.BChildOptional);
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .HasOne(x => x.BParentRequired_1)
                     .WithOne(x => x.BChildRequired)
                     .IsRequired()
                     .OnDelete(DeleteBehavior.Cascade);
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .HasOne(x => x.BParentRequired_2)
                     .WithMany(x => x.BChildCollection);
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .HasMany(x => x.BParentCollection)
                     .WithOne(x => x.BChildRequired)
                     .HasForeignKey("BChildRequired_Id")
                     .IsRequired()
                     .OnDelete(DeleteBehavior.Cascade);
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .HasMany(x => x.BParentCollection_2)
                     .WithOne(x => x.BChildOptional)
                     .HasForeignKey("BChildOptional_Id");
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .HasOne(x => x.BParentOptional)
                     .WithOne(x => x.BChildRequired)
                     .HasForeignKey("BChildRequired1_Id")
                     .IsRequired()
                     .OnDelete(DeleteBehavior.Cascade);
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .HasOne(x => x.BParentOptional_1)
                     .WithMany(x => x.BChildCollection);
         modelBuilder.Entity<Testing_CoreV2NetCore.BChild>()
                     .HasOne(x => x.BParentOptional_2)
                     .WithOne(x => x.BChildOptional);

         modelBuilder.Entity<Testing_CoreV2NetCore.BParentCollection>()
                     .ToTable("BParentCollections")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.BParentCollection>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<Testing_CoreV2NetCore.BParentOptional>()
                     .ToTable("BParentOptionals")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.BParentOptional>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<Testing_CoreV2NetCore.BParentRequired>()
                     .ToTable("BParentRequireds")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.BParentRequired>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<Testing_CoreV2NetCore.Child>()
                     .ToTable("Children")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.Child>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.Child>()
                     .HasOne(x => x.Parent)
                     .WithMany(x => x.Children);


         modelBuilder.Entity<Testing_CoreV2NetCore.ConcreteDerivedClassWithRequiredProperties>()
                     .Property(t => t.Property1)
                     .IsRequired();


         modelBuilder.Entity<Testing_CoreV2NetCore.HiddenEntity>()
                     .ToTable("HiddenEntities")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.HiddenEntity>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<Testing_CoreV2NetCore.Master>()
                     .ToTable("Masters")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.Master>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.Master>()
                     .HasMany(x => x.Children)
                     .WithOne()
                     .IsRequired()
                     .OnDelete(DeleteBehavior.Cascade);

         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .ToTable("ParserTests")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.name7)
                     .HasMaxLength(6);
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.name8)
                     .HasMaxLength(6);
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.name9)
                     .HasMaxLength(6);
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.name)
                     .HasMaxLength(6);
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.name15)
                     .HasMaxLength(6);
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.name16)
                     .HasMaxLength(6);
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.name17)
                     .HasMaxLength(6);
         modelBuilder.Entity<Testing_CoreV2NetCore.ParserTest>()
                     .Property(t => t.name18)
                     .HasMaxLength(6);

         modelBuilder.Entity<Testing_CoreV2NetCore.RenamedColumn>()
                     .ToTable("RenamedColumns")
                     .HasKey(t => t.Id)
                     .HasName("Foo");
         modelBuilder.Entity<Testing_CoreV2NetCore.RenamedColumn>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasColumnName("Foo")
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<Testing_CoreV2NetCore.UChild>()
                     .ToTable("UChilds")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.UChild>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<Testing_CoreV2NetCore.UParentCollection>()
                     .ToTable("UParentCollections")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentCollection>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentCollection>()
                     .HasOne(x => x.UChildRequired)
                     .WithMany()
                     .HasForeignKey("UChildRequired_Id");
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentCollection>()
                     .HasOne(x => x.UChildOptional)
                     .WithMany()
                     .HasForeignKey("UChildOptional_Id");

         modelBuilder.Entity<Testing_CoreV2NetCore.UParentOptional>()
                     .HasOne(x => x.UChildOptional)
                     .WithOne();
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentOptional>()
                     .HasMany(x => x.UChildCollection)
                     .WithOne();
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentOptional>()
                     .HasOne(x => x.UChildRequired)
                     .WithOne()
                     .HasForeignKey("UChildRequired_Id");

         modelBuilder.Entity<Testing_CoreV2NetCore.UParentRequired>()
                     .ToTable("UParentRequireds")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentRequired>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentRequired>()
                     .HasOne(x => x.UChildRequired)
                     .WithOne()
                     .IsRequired()
                     .OnDelete(DeleteBehavior.Cascade);
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentRequired>()
                     .HasMany(x => x.UChildCollection)
                     .WithOne()
                     .IsRequired()
                     .OnDelete(DeleteBehavior.Cascade);
         modelBuilder.Entity<Testing_CoreV2NetCore.UParentRequired>()
                     .HasOne(x => x.UChildOptional)
                     .WithOne()
                     .IsRequired()
                     .OnDelete(DeleteBehavior.Cascade);

         OnModelCreatedImpl(modelBuilder);
      }
   }
}

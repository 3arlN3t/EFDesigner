//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Sandbox_EFCore
{
   public partial class Derived: INotifyPropertyChanged
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Derived()
      {
         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="name"></param>
      /// <param name="symbol"></param>
      /// <param name="id"></param>
      public Derived(string name, string symbol, int id)
      {
         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this.Name = name;

         if (string.IsNullOrEmpty(symbol)) throw new ArgumentNullException(nameof(symbol));
         this.Symbol = symbol;

         this.Id = id;


         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="name"></param>
      /// <param name="symbol"></param>
      /// <param name="id"></param>
      public static Derived Create(string name, string symbol, int id)
      {
         return new Derived(name, symbol, id);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Indexed, Required
      /// </summary>
      [Required]
      public string Name { get; set; }

      /// <summary>
      /// Backing field for Symbol
      /// </summary>
      internal string _Symbol;
      /// <summary>
      /// When provided in a partial class, allows value of Symbol to be changed before setting.
      /// </summary>
      partial void SetSymbol(string oldValue, ref string newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Symbol to be changed before returning.
      /// </summary>
      partial void GetSymbol(ref string result);

      /// <summary>
      /// Indexed, Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      public string Symbol
      {
         get
         {
            string value = _Symbol;
            GetSymbol(ref value);
            return (_Symbol = value);
         }
         set
         {
            string oldValue = _Symbol;
            SetSymbol(oldValue, ref value);
            if (oldValue != value)
            {
               _Symbol = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Identity, Indexed, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      public virtual event PropertyChangedEventHandler PropertyChanged;

      protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
      {
         PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }

   }
}


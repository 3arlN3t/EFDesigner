//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Sandbox_EFCore
{
   public partial class PressReleaseDetail
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected PressReleaseDetail()
      {
         PressReleases = new System.Collections.Generic.HashSet<global::Sandbox_EFCore.PressRelease>();

         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="pressrelease"></param>
      /// <param name="_pressrelease0"></param>
      public PressReleaseDetail(global::Sandbox_EFCore.PressRelease pressrelease, global::Sandbox_EFCore.PressRelease _pressrelease0)
      {
         if (pressrelease == null) throw new ArgumentNullException(nameof(pressrelease));
         this.PressRelease = pressrelease;

         if (_pressrelease0 == null) throw new ArgumentNullException(nameof(_pressrelease0));
         _pressrelease0.PressReleaseDetails.Add(this);

         this.PressReleases = new System.Collections.Generic.HashSet<global::Sandbox_EFCore.PressRelease>();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="pressrelease"></param>
      /// <param name="_pressrelease0"></param>
      public static PressReleaseDetail Create(global::Sandbox_EFCore.PressRelease pressrelease, global::Sandbox_EFCore.PressRelease _pressrelease0)
      {
         return new PressReleaseDetail(pressrelease, _pressrelease0);
      }

      /*************************************************************************
       * Persistent properties
       *************************************************************************/

      /// <summary>
      /// Backing field for Id
      /// </summary>
      protected int _Id;
      /// <summary>
      /// When provided in a partial class, allows value of Id to be changed before setting.
      /// </summary>
      partial void SetId(int oldValue, ref int newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Id to be changed before returning.
      /// </summary>
      partial void GetId(ref int result);

      /// <summary>
      /// Identity, Required, Indexed
      /// </summary>
      [Key]
      [Required]
      public int Id
      {
         get
         {
            int value = _Id;
            GetId(ref value);
            return (_Id = value);
         }
         private set
         {
            int oldValue = _Id;
            SetId(oldValue, ref value);
            if (oldValue != value)
            {
               _Id = value;
            }
         }
      }

      /// <summary>
      /// Backing field for Property1
      /// </summary>
      protected string _Property1;
      /// <summary>
      /// When provided in a partial class, allows value of Property1 to be changed before setting.
      /// </summary>
      partial void SetProperty1(string oldValue, ref string newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Property1 to be changed before returning.
      /// </summary>
      partial void GetProperty1(ref string result);

      public string Property1
      {
         get
         {
            string value = _Property1;
            GetProperty1(ref value);
            return (_Property1 = value);
         }
         set
         {
            string oldValue = _Property1;
            SetProperty1(oldValue, ref value);
            if (oldValue != value)
            {
               _Property1 = value;
            }
         }
      }

      /// <summary>
      /// Backing field for Property2
      /// </summary>
      protected string _Property2;
      /// <summary>
      /// When provided in a partial class, allows value of Property2 to be changed before setting.
      /// </summary>
      partial void SetProperty2(string oldValue, ref string newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Property2 to be changed before returning.
      /// </summary>
      partial void GetProperty2(ref string result);

      public string Property2
      {
         get
         {
            string value = _Property2;
            GetProperty2(ref value);
            return (_Property2 = value);
         }
         set
         {
            string oldValue = _Property2;
            SetProperty2(oldValue, ref value);
            if (oldValue != value)
            {
               _Property2 = value;
               OnPropertyChanged();
            }
         }
      }

      /*************************************************************************
       * Persistent navigation properties
       *************************************************************************/

      public virtual ICollection<global::Sandbox_EFCore.PressRelease> PressReleases { get; private set; }

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::Sandbox_EFCore.PressRelease PressRelease { get; set; }

      public virtual event PropertyChangedEventHandler PropertyChanged;

      protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
      {
         PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }

   }
}


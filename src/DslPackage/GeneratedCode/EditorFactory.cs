//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using VSShellInterop = global::Microsoft.VisualStudio.Shell.Interop;
using DslShell = global::Microsoft.VisualStudio.Modeling.Shell;
using MexModeling = global::Mexedge.VisualStudio.Modeling;
using Sawczyn.EFDesigner.EFModel.Extensions;

namespace Sawczyn.EFDesigner.EFModel
{
   /// <summary>
   /// Double-derived class to allow easier code customization.
   /// </summary>
   [global::System.Runtime.InteropServices.Guid(Constants.EFModelEditorFactoryId)]
   internal partial class EFModelEditorFactory : EFModelEditorFactoryBase
   {
      /// <summary>
      /// Constructs a new EFModelEditorFactory.
      /// </summary>
      public EFModelEditorFactory(global::System.IServiceProvider serviceProvider)
         : base(serviceProvider)
      {
      }
   }

   /// <summary>
   /// Factory for creating our editors
   /// </summary>
   internal abstract class EFModelEditorFactoryBase : DslShell::ModelingEditorFactory
   {
      /// <summary>
      /// Constructor.
      /// </summary>
      /// <param name="serviceProvider">Service provider used to access VS services.</param>
      protected EFModelEditorFactoryBase(global::System.IServiceProvider serviceProvider) : base(serviceProvider)
      {
      }

      /// <summary>
      /// Called by the shell to ask the editor to map a logical view to a physical one.
      /// </summary>
      protected override string MapLogicalView(global::System.Guid logicalView, object viewContext)
      {
         if (viewContext is MexModeling::ViewContext context)
            return context.ToString();
         return base.MapLogicalView(logicalView, viewContext);    
      }

      /// <summary>
      /// Called by the shell to ask the editor to create a new document object.
      /// </summary>
      public override DslShell::ModelingDocData CreateDocData(string fileName, VSShellInterop::IVsHierarchy hierarchy, uint itemId)
      {
         // Create the document type supported by this editor.
         return new EFModelDocData(this.ServiceProvider, typeof(EFModelEditorFactory).GUID);
      }

      /// <summary>
      /// Called by the shell to ask the editor to create a new view object.
      /// </summary>
      protected override DslShell::ModelingDocView CreateDocView(DslShell::ModelingDocData docData, string physicalView, out string editorCaption)
      {
         // Create the view type supported by this editor.
         MexModeling::ViewContext viewContext;

         string displayName = MexModeling::ViewContext.TryParse(physicalView, out viewContext)
                                 ? string.IsNullOrEmpty(viewContext.DiagramName) ? docData.Store.ModelRoot().GetFileName() : viewContext.DiagramName
                                 : string.IsNullOrEmpty(physicalView) ? docData.Store.ModelRoot().GetFileName() : physicalView;

         string docViewName = MexModeling::ViewContext.TryParse(physicalView, out viewContext)
                                 ? displayName
                                 : physicalView;

         editorCaption = $" [{displayName}]";
         return new EFModelDocView(docData, this.ServiceProvider, docViewName);
      }
   }
}

